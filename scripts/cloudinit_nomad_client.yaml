#cloud-config
write_files:
  - path: /var/tmp/nomad.hcl
    permissions: '0640'
    content: |
      # Values for server_count, retry_join, and ip_address are
      # placed here during Terraform setup and come from the 
      # ../shared/data-scripts/user-data-server.sh script
      
      data_dir  = "/opt/nomad/data"
      bind_addr = "0.0.0.0"
      datacenter = "dc1"
      
      advertise {
        http = "IP_ADDRESS"
        rpc  = "IP_ADDRESS"
        serf = "IP_ADDRESS"
      }
      
      acl {
        enabled = true
      }
      
      client {
        enabled = true
        options {
          "driver.raw_exec.enable"    = "1"
          "docker.privileged.enabled" = "true"
        }
        server_join {
          retry_join = ["RETRY_JOIN"]
        }
      }
  - path: /etc/systemd/system/nomad.service
    permissions: '0640'
    content: |
      [Unit]
      Description=Nomad
      Documentation=https://nomadproject.io/docs/
      Wants=network-online.target
      After=network-online.target
      StartLimitIntervalSec=10
      StartLimitBurst=3
      
      [Service]
      ExecReload=/bin/kill -HUP $MAINPID
      ExecStart=/usr/local/bin/nomad agent -config /etc/nomad.d
      KillMode=process
      KillSignal=SIGINT
      LimitNOFILE=infinity
      LimitNPROC=infinity
      Restart=on-failure
      RestartSec=2
      TasksMax=infinity
      
      [Install]
      WantedBy=multi-user.target
                 
  - path: /var/tmp/install_software.sh 
    permissions: '0750'
    content: |
      #!/bin/bash
      mkdir -p /ops/shared/config
      cp /var/tmp/nomad.hcl /ops/shared/config/nomad.hcl
    
      ACL_DIRECTORY="/ops/shared/config"
      NOMAD_BOOTSTRAP_TOKEN="/var/tmp/nomad_bootstrap"
      NOMAD_USER_TOKEN="/var/tmp/nomad_user_token"
      CONFIGDIR="/ops/shared/config"
      NOMADVERSION=${nomad_version}
      NOMADDOWNLOAD=https://releases.hashicorp.com/nomad/$${NOMADVERSION}/nomad_$${NOMADVERSION}_linux_amd64.zip
      NOMADCONFIGDIR="/etc/nomad.d"
      NOMADDIR="/opt/nomad"
      HOME_DIR="ubuntu"
      CLOUD_ENV=${cloud_env}
      
      # Install phase begin ---------------------------------------
      
      # Install dependencies
      sudo apt-get update && sudo apt-get install -y software-properties-common
      # IP_ADDRESS=$(curl http://instance-data/latest/meta-data/local-ipv4)
      # PUBLIC_IP=$(curl http://instance-data/latest/meta-data/public-ipv4)

      AWS_TOKEN=`curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600"`
      IP_ADDRESS=`curl -H "X-aws-ec2-metadata-token: $AWS_TOKEN" -v http://169.254.169.254/latest/meta-data/local-ipv4`
      PUBLIC_IP=`curl -H "X-aws-ec2-metadata-token: $AWS_TOKEN" -v http://169.254.169.254/latest/meta-data/public-ipv4`
      
      sudo apt-get update
      sudo apt-get install -y unzip tree redis-tools jq curl tmux net-tools
      sudo apt-get clean
      
      
      # Disable the firewall
      
      sudo ufw disable || echo "ufw not installed"
      
      # Download and install Nomad
      curl -L $NOMADDOWNLOAD > nomad.zip
      
      sudo unzip nomad.zip -d /usr/local/bin
      sudo chmod 0755 /usr/local/bin/nomad
      sudo chown root:root /usr/local/bin/nomad
      
      sudo mkdir -p $NOMADCONFIGDIR
      sudo chmod 755 $NOMADCONFIGDIR
      sudo mkdir -p $NOMADDIR
      sudo chmod 755 $NOMADDIR
      
      # Docker
      distro=$(lsb_release -si | tr '[:upper:]' '[:lower:]')
      sudo apt-get install -y apt-transport-https ca-certificates gnupg2 
      curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -
      sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/$${distro} $(lsb_release -cs) stable"
      sudo apt-get update
      sudo apt-get install -y docker-ce
      
      # Java
      sudo add-apt-repository -y ppa:openjdk-r/ppa
      sudo apt-get update 
      sudo apt-get install -y openjdk-8-jdk
      JAVA_HOME=$(readlink -f /usr/bin/java | sed "s:bin/java::")
      
      # CNI plugins
      curl -L -o cni-plugins.tgz "https://github.com/containernetworking/plugins/releases/download/v1.0.0/cni-plugins-linux-$( [ $(uname -m) = aarch64 ] && echo arm64 || echo amd64)"-v1.0.0.tgz
      sudo mkdir -p /opt/cni/bin
      sudo tar -C /opt/cni/bin -xzf cni-plugins.tgz
      
      echo 1 | sudo tee /proc/sys/net/bridge/bridge-nf-call-arptables
      echo 1 | sudo tee /proc/sys/net/bridge/bridge-nf-call-ip6tables
      echo 1 | sudo tee /proc/sys/net/bridge/bridge-nf-call-iptables      
      
      # Install phase finish ---------------------------------------
      
      echo "Install complete"
      
      # Server setup phase begin -----------------------------------
      RETRY_JOIN="${retry_join}"
      DOCKER_BRIDGE_IP_ADDRESS=(`ifconfig docker0 2>/dev/null|awk '/inet addr:/ {print $2}'|sed 's/addr://'`)
      
      sed -i "s/IP_ADDRESS/$IP_ADDRESS/g" $CONFIGDIR/nomad.hcl
      sed -i "s/RETRY_JOIN/$RETRY_JOIN/g" $CONFIGDIR/nomad.hcl
      cp $CONFIGDIR/nomad.hcl $NOMADCONFIGDIR/nomad.hcl
      # sudo cp $CONFIGDIR/nomad.service /etc/systemd/system/nomad.service
      
      sudo systemctl enable nomad.service
      sudo systemctl start nomad.service
      
      # Wait for Nomad to restart
      for i in {1..9}; do
          # capture stdout and stderr
          set +e
          sleep 1
          OUTPUT=$(nomad -v 2>&1)
          if [ $? -ne 0 ]; then
              continue
          else
              exit 0
          fi
      done
      
      export NOMAD_ADDR=http://$IP_ADDRESS:4646
      
      # Add hostname to /etc/hosts
      
      echo "127.0.0.1 $(hostname)" | sudo tee --append /etc/hosts
      
      # Add Docker bridge network IP to /etc/resolv.conf (at the top)
      
      echo "nameserver $DOCKER_BRIDGE_IP_ADDRESS" | sudo tee /etc/resolv.conf.new
      cat /etc/resolv.conf | sudo tee --append /etc/resolv.conf.new
      sudo mv /etc/resolv.conf.new /etc/resolv.conf
      
      # Set env vars
      echo "export NOMAD_ADDR=http://$IP_ADDRESS:4646" | sudo tee --append /home/$HOME_DIR/.bashrc
      echo "export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64/jre"  | sudo tee --append /home/$HOME_DIR/.bashrc
      
      # Client setup phase finish -----------------------------------      
runcmd:
  - sudo bash /var/tmp/install_software.sh 
